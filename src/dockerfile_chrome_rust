FROM ubuntu:23.10

# Install chrome => one layer
RUN apt-get update \
    && apt-get install --no-install-recommends --no-install-suggests --yes curl \
    ca-certificates # ca certificate for https\
    wget \
    gnupg \
    unzip \
    sudo # change to root\
    build-essential \
    libx11-xcb1  # nessery for chrome \
    libgl1-mesa-dri # nessery for chrome too \
    libcanberra-gtk-module # nessery for chrome too \
    libasound2 # sound out of docker\
    init-system-helpers # nessery update-rc.d \
    # Set the Chrome repo.
    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list \
    # Install Chrome.
    && apt-get update \
    && apt-get install --no-install-recommends --no-install-suggests --yes google-chrome-stable \
    && apt-get clean \ 
    && rm -rf /var/lib/apt/lists/*


# install rust
ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH \
    RUST_VERSION=1.73.0

RUN set -eux; \
    dpkgArch="$(dpkg --print-architecture)"; \
    case "${dpkgArch##*-}" in \
    amd64) rustArch='x86_64-unknown-linux-gnu'; rustupSha256='0b2f6c8f85a3d02fde2efc0ced4657869d73fccfce59defb4e8d29233116e6db' ;; \
    armhf) rustArch='armv7-unknown-linux-gnueabihf'; rustupSha256='f21c44b01678c645d8fbba1e55e4180a01ac5af2d38bcbd14aa665e0d96ed69a' ;; \
    arm64) rustArch='aarch64-unknown-linux-gnu'; rustupSha256='673e336c81c65e6b16dcdede33f4cc9ed0f08bde1dbe7a935f113605292dc800' ;; \
    i386) rustArch='i686-unknown-linux-gnu'; rustupSha256='e7b0f47557c1afcd86939b118cbcf7fb95a5d1d917bdd355157b63ca00fc4333' ;; \
    *) echo >&2 "unsupported architecture: ${dpkgArch}"; exit 1 ;; \
    esac; \
    url="https://static.rust-lang.org/rustup/archive/1.26.0/${rustArch}/rustup-init"; \
    wget "$url"; \
    echo "${rustupSha256} *rustup-init" | sha256sum -c -; \
    chmod +x rustup-init; \
    ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; \
    rm rustup-init; \
    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \
    rustup --version; \
    cargo --version; \
    rustc --version; \
    rustup self update; \
    rustup update;

# install chromedriver

# ENV CHROME_VERSION = $(google-chrome  --product-version | awk '{print $1}' |awk -F. '{print $1}')
ENV CHROMEDRIVER_DIR=/chromedriver
ENV DOWNLOAD_DIR=/DOWNLOAD

RUN set -eux; \ 
    mkdir ${CHROMEDRIVER_DIR} \
    && mkdir ${DOWNLOAD_DIR} \ 
    && curl --output ${DOWNLOAD_DIR}/chromedriver-linux64.zip  "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/119.0.6045.159/linux64/chromedriver-linux64.zip" \
    && unzip ${DOWNLOAD_DIR}/chromedriver-linux64.zip -d ${CHROMEDRIVER_DIR}




#create user
ARG USER_NAME=default_user
ARG USER_UID=1999
ARG USER_GID=$USER_UID

RUN set -eux; \
    && groupadd --gid $USER_GID $USER_NAME \
    && useradd --uid $USER_UID --gid $USER_GID --password $USER_NAME -m $USER_NAME \
    && echo "$USER_NAME:$USER_NAME" | chpasswd \
    && adduser $USER_NAME sudo 
# start services
# RUN update-rc.d dbus enable

# USER default_user
USER $USER_NAME

# add rust demo project
ENV RUST_PROJECT_DIR=/home/default_user/rust_work_space/tokio_finviz_shortput
# init cargo project
# change to home_directory
RUN set -eux; \
    &&  mkdir /home/$USER_NAME/rust_work_space \
    &&  cd $_ \
    &&  mkdir $RUST_PROJECT_DIR  \
    &&  cargo init $RUST_PROJECT_DIR  \
    &&  cd $RUST_PROJECT_DIR  \
    &&  cargo add tokio  \
    &&  cargo add tokio thirtyfour color-eyre sxd-document sxd-xpath table-extract  \
    &&  cargo build \
    &&  cargo run \
    &&  cd $RUST_PROJECT_DIR \
    &&  mkdir ./examples

# copy
COPY ./src/tokio_finviz.rs $RUST_PROJECT_DIR/examples/tokio_finviz.rs 

# add new entry to file e.g. Cargo.toml
RUN set -eux; \
    && tee -a /home/default_user/rust_work_space/tokio_finviz_shortput/Cargo.toml > /dev/null <<EOT
#
[[example]]
name = "tokio_finviz"
EOT \
&& cd $RUST_PROJECT_DIR \
&& cargo build --example tokio_finviz

ENTRYPOINT ["/bin/bash"]
# ENTRYPOINT ["google-chrome","--no-sandbox","--disable-features=dbus"]
# --enable-unsafe-webgpu --enable-features=Vulkan --use-vulkan=swiftshader --use-webgpu-adapter=swiftshader --no-sandbox
# ENTRYPOINT ["set MESA_LOADER_DRIVER_OVERRIDE=\"i915\"","&&","google-chrome","--enable-unsafe-webgpu", "--enable-features=Vulkan","--use-vulkan=swiftshader","--use-webgpu","-adapter=swiftshader","--no-sandbox","--disable-features=dbus"]
# ENV MESA_LOADER_DRIVER_OVERRIDE=i915
# ENTRYPOINT ["google-chrome","--enable-unsafe-webgpu", "--enable-features=Vulkan","--use-vulkan=swiftshader","--use-webgpu","-adapter=swiftshader","--no-sandbox","--disable-features=dbus"]
